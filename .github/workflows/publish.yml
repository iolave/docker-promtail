name: Docker publish

on:
  push:
    tags: [ "v*" ]

jobs:
  get-tags:
    name: Get tags
    runs-on: "ubuntu-latest"
    outputs:
      patch: ${{ steps.tags.outputs.patch }}
      minor: ${{ steps.tags.outputs.minor }}
      major: ${{ steps.tags.outputs.major }}
      full: ${{ steps.tags.outputs.full }}
    steps:
      - name: Get Major/Minor/Patch tags
        id: tags
        shell: bash
        run: |
          TAG_PATCH=$(echo ${{ github.ref_name }} | cut -d '.' -f 1,2,3)
          TAG_MINOR=$(echo ${{ github.ref_name }} | cut -d '.' -f 1,2)
          TAG_MAJOR=$(echo ${{ github.ref_name }} | cut -d '.' -f 1)
          TAG_FULL=$TAG_PATCH
          echo "patch tag: $TAG_PATCH"; echo "patch=$TAG_PATCH" >> "$GITHUB_OUTPUT"
          echo "minor tag: $TAG_MINOR"; echo "minor=$TAG_MINOR" >> "$GITHUB_OUTPUT"
          echo "major tag: $TAG_MAJOR"; echo "major=$TAG_MAJOR" >> "$GITHUB_OUTPUT"
          echo "full tag: $TAG_FULL"; echo "full=$TAG_FULL" >> "$GITHUB_OUTPUT"
  check-tags:
    name: Check for existing tags
    runs-on: "ubuntu-latest"
    outputs:
      exists_latest: ${{ steps.check_tags.outputs.exists_latest }}
    needs: [ get-tags ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Check tags
        id: check_tags
        shell: bash
        run: |
          tags=$(git --no-pager tag --list)
          patch="${{ needs.get-tags.outputs.patch }}"
          if [[ $tags =~ "${{ needs.get-tags.outputs.patch }}" ]]; then
            echo "ERROR: tag $patch exists. Try removing it manually";
            exit 1
          else 
            echo "INFO: tag $patch does not exist. All looks good"
          fi
  publish:
    name: Build docker image and publish
    runs-on: ubuntu-latest
    needs: [ get-tags ]
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          push: true
          tags: |
            iolave/promtail:latest, iolave/promtail:${{ needs.get-tags.outputs.patch }}, iolave/promtail:${{ needs.get-tags.outputs.minor }}, iolave/promtail:${{ needs.get-tags.outputs.major }}
  create-release:
    runs-on: "ubuntu-latest"
    needs: [ get-tags, check-tags ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Get previous version from CHANGELOG 
        id: prev
        shell: bash
        run: |
          prev_version=$(cat CHANGELOG.md | grep -o '##\ v[0-9]*\.[0-9]*\.[0-9]*' | sed -e s/##\ //g | sed -n 2p)
          echo "Previous version: $prev_version"
          echo "previous_version=$prev_version" >> "$GITHUB_OUTPUT"
      - name: Set release notes
        id: notes
        shell: bash
        run: |
          echo "# CHANGELOG" > release-notes.md
          prev_version=$(cat CHANGELOG.md | grep -o '##\ v[0-9]*\.[0-9]*\.[0-9]*' | sed -e s/##\ //g | sed -n 2p)
          sed -n '/## v${{ needs.get-tags.outputs.patch }}/,/## ${{ steps.prev.outputs.previous_version }}/p' CHANGELOG.md | sed  -e s/##\ v[0-9]*\.[0-9]*\.[0-9]*//g >> release-notes.md
          echo "**Full Changelog**: https://github.com/iolave/docker-promtail/compare/${{ steps.prev.outputs.previous_version }}...v${{ needs.get-tags.outputs.patch }}" >> release-notes.md
          notes=$(cat release-notes.md | base64 -w 0)
          echo "release_notes=$notes" >> "$GITHUB_OUTPUT"
      - uses: akiojin/decode-base64-github-action@v0.1.0
        id: decode-base64
        with:
          base64: ${{ steps.notes.outputs.release_notes }}
      - name: Output release notes
        shell: bash
        run: echo "${{ steps.decode-base64.outputs.decoded }}"
      - name: Release pushed tag
        uses: softprops/action-gh-release@v2
        with:
          body: ${{ steps.decode-base64.outputs.decoded }}
          tag_name: v${{ needs.get-tags.outputs.patch }}
          make_latest: true
